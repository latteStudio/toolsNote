{"./":{"url":"./","title":"Introduction","keywords":"","body":"1. Introduction1. Introduction 本书为笔者在学习使用一些工具时的笔记和踩坑记录 latteplus            updated 2021-02-08 10:21:45 "},"1-gitbook搭建笔记/1-gitbook本地搭建.html":{"url":"1-gitbook搭建笔记/1-gitbook本地搭建.html","title":"1-gitbook本地搭建","keywords":"","body":"1. gitbook本地部署1.1. 环境准备1.2. 流程概述1.3. 实际流程2. gitbook目录结构2.1. gitbook build构建后目录3. typora/picGo/gitee搭建图床3.1. 环境准备3.2. gitee仓库创建3.3. picGo配置3.4. typora配置3.5. 上传测试1. gitbook本地部署 1.1. 环境准备 windows系统 10 nodeJs 12.19.0版本 1.2. 流程概述 windows系统安装nodejs 选择一个存放gitbook电子书的目录，在该目录打开cmd窗口 用npm安装gitbook-cli工具 gitbook init初始化该目录 构建静态网页文件 gitbook build 或gitbook serve 1.3. 实际流程 windows系统安装nodejs # 安装后验证 C:\\Users\\pc>node --version v12.19.0 C:\\Users\\pc>npm --version 6.14.8 选择一个存放gitbook电子书的目录，在该目录打开cmd窗口 用npm安装gitbook-cli工具 gitbook-cli工具用于安装gitbook，支持其多版本共存， C:\\myEbook>npm install -g gitbook-cli C:\\Users\\pc\\AppData\\Roaming\\npm\\gitbook -> C:\\Users\\pc\\AppData\\Roaming\\npm\\node_modules\\gitbook-cli\\bin\\gitbook.js + gitbook-cli@2.3.2 updated 3 packages in 12.147s gitbook init初始化该目录 gitbook init时，gitbook-cli会先安装gitbook，然后进行init C:\\myEbook>gitbook init Installing GitBook 3.2.3 node版本为12时，会出现的问题 C:\\myEbook>gitbook init Installing GitBook 3.2.3 C:\\Users\\pc\\AppData\\Roaming\\npm\\node_modules\\gitbook-cli\\node_modules\\npm\\node_modules\\graceful-fs\\polyfills.js:287 if (cb) cb.apply(this, arguments) ^ TypeError: cb.apply is not a function at C:\\Users\\pc\\AppData\\Roaming\\npm\\node_modules\\gitbook-cli\\node_modules\\npm\\node_modules\\graceful-fs\\polyfills.js:287:18 at FSReqCallback.oncomplete (fs.js:169:5) 解决方法：根据提示目录，注释掉polyfills.js中的62到64三行，再重新init即成功 //fs.stat = statFix(fs.stat) //fs.fstat = statFix(fs.fstat) //fs.lstat = statFix(fs.lstat) 构建静态网页文件 gitbook build，build会编译为静态网页文件，放在新生成的_book目录下，（该目录放到github仓库的目录下，就可以放到互联网上供人访问 或gitbook serve，会先调用build编译网页文件，然后在本地的4000端口提供http访问 2. gitbook目录结构 2.1. gitbook build构建后目录 README为改书的描述文件，描述改书的内容，背景等信息 SUMMARY为改书的目录结构的定义文件， 手动编辑改文件，然后gitbook init会生成对应的目录和文件； # 示例 # Jartto-GitBook-Demo * [一、概要](README.md) * [1.示例](README.md) * [2.说明](README.md) * [3.文档](README.md) * [二、高级](README.md) * [1.配置](README.md) * [2.插件](README.md) npm install 安装gitbook-summary插件， 先创建目录，利用book sm命令可以根据顶级目录下的各级目录和文件自动生成SUMMARY.md文件 book.json为书的配置文件， 定义书的标题 启用的插件 作者 采用语言等 3. typora/picGo/gitee搭建图床 3.1. 环境准备 windows系统10 picGo 2.2.2版本 gitee账号 typora 在pc机上安装以上软件，并创建gitee账户，软件安装包，直接Google搜索下一步安装大法即可 3.2. gitee仓库创建 注册gitee账户 创建gitee仓库 生成该账户的token 个人设置-》私人令牌-》生成token中点击生成， 生成时注意该token的权限，需要设置给repo级别（github中，gitee中是叫projects 该token之后会配置给picgo，供其访问gitee， 3.3. picGo配置 安装（略 安装支持gitee做图床的的插件，picGo默认不支持gitee，安装gitee-uploader 1.1.2插件 配置gitee仓库的信息，（用到了gitee中生成的token repo：用户名/仓库名 branch：默认master token：替换为你生成的token path：填入img即可 点击确定，点击设为默认图床 3.4. typora配置 安装typora，（略 配置图片选项 文件-》偏好设置-》图像-》插入图片时：选择上传图片； 上传服务设定-》选择picgo（app），路径为你本地安装的路径； 点击验证图片上传选项即可验证，是否配置成功； 应该都会出错，需要再配置下picGo的server，是因为typora默认采用的端口一般和picgo中设置的server端口不同，picGo中改为相同即可； 3.5. 上传测试 遇到问题1 picGo中设置仓库名时，直接写的picGo-bed，一直报错404 project not found，在检查gitee仓库时发现 库名不是这个，（忽略了gitee会自动加短横线，变为小写， 解决：picGo设置repo时，改为pic-go-bed就行了 遇到问题2 typora中测试上传时，提示上传失败，是因为typora默认采用的端口是36677，和picgo中设置的server端口不同，picGo中改为相同即可； 下为上传成功测试结果； 之后，再往typora中贴图片，就好经由picGo传入gitee仓库，右下角会有提示 latteplus            updated 2021-02-08 10:21:45 "},"1-gitbook搭建笔记/2-gitbook远程部署.html":{"url":"1-gitbook搭建笔记/2-gitbook远程部署.html","title":"2-gitbook远程部署","keywords":"","body":"1. github actions自动部署1.1. 前言1.2. 整体流程1.3. 部署过程1.4. 待解决问题1.5. 多客户协同使用1.6. 单仓库多分支手动部署1. github actions自动部署 1.1. 前言 在gitbook电子书目录下，主要有2类文件； gitbook的“源码”文件；即自己编写的md文件，包括SUMMARY.md和READ.md以及book.json这些文件 gitbook构建后的静态网页文件（即gitbook build后生成的_book目录下的文件； 一般情况的流程： 在本地编写好源码文件 gitbook build生成_book目录 然后将_book目录推送到远程github仓库，从而提供互联网访问 简化流程： 利用CI/CD的流程，借助自动构建的工具实现gitbook网页文件的自动构建 本地只需编写md文件 将源码文件推动到github仓库 自动触发构建流程，构建为网页文件，并将构建好的文件推送到github仓库 1.2. 整体流程 笔者采用，github+github actions的方式实现自动构建流程 github actions介绍，github actions是实现CI CD的一套流程，实现代码的拉取，构建，编译，发布等工作，类比于Jenkins，且actions可以复用，在编辑的yaml文件中可以直接引用别人的actions 优点： 本机甚至不需要安装gitbook 只需要git就好 缺点： actions流程中采用book sm自动生成目录文件，无法用###进行分隔（逼死强迫症 手写summary.md又太复杂 本地pc机，安装git环境； 创建一个目录，用于存放电子书的md文件，并git初始化； 在电子书顶级目录下，创建带序号的目录和文件； （目录可多级嵌套，序号后用-短横线分割，借助book sm自动生成summary.md文件 在github上，新建一个存放电子书md文件的仓库； 本地电子书文件夹，和远程仓库相关联； 推动本地的电子书目录到远程仓库的主分支； 本地目录添加book.json README.md .github/workflows/auto-deploy-site.yml (auto-deploy-site.yml存放在特定的目录结构下，会被github识别，运行其中的actions，其中actions就相当于Jenkins的构建项目指令，可以将推送的书籍源码，构建为gitbook电子书格式，并推送到仓库) （实现机制：运行基本环境容器，并在其中安装nodejs，gitbook等包，在容器中编译为gitbook网页版的格式，然后推送到github，之后容器删除，实现了自动部署gitbook网页） github上，个人设置中，生成access token 并添加到仓库的secrts中，命名为token，auto-deploy-site.yml会用到； 1.3. 部署过程 本地pc机，安装git环境； 略... 创建一个目录，用于存放电子书的md文件，并git初始化； latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote $ pwd /d/myEbook/leanGitNote latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote $ git init Initialized empty Git repository in D:/myEbook/leanGitNote/.git/ 在电子书顶级目录下，创建带序号的目录和文件； （目录可多级嵌套，序号后用-短横线分割，之后在actions中借助book sm自动生成summary.md文件 $ mkdir.exe 1-git初识 latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote (master) $ mkdir.exe 2-git基础 latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote (master) $ ll total 0 drwxr-xr-x 1 latteplus 197121 0 Jan 12 18:59 1-git初识/ drwxr-xr-x 1 latteplus 197121 0 Jan 12 18:59 2-git基础/ latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote (master) $ touch.exe 1-git初识/1-git初识.md latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote (master) $ touch.exe 2-git基础/2-git基础.md 在github上，新建一个存放电子书md文件的仓库； 本地电子书文件夹，和远程仓库相关联； ```powershell latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote (master) $ git branch -M main 一般习惯将master改名为main分支，且actions的文件中也用到main分支，（要保持一致 latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote (main) $ git remote add origin git@github.com:latteplus/learn-git-note.git latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote (main) $ git remote -v origin git@github.com:latteplus/learn-git-note.git (fetch) origin git@github.com:latteplus/learn-git-note.git (push) 在这之前的步骤 1，本地生成密钥对 2，公钥添加到github账户 3，git config配置姓名和账户 6. 推动本地的电子书目录到远程仓库的主分支； ```powershell latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote (main) $ git add . latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote (main) $ git commit -m \"init\" [main (root-commit) 7cac677] init 2 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 \"1-git\\345\\210\\235\\350\\257\\206/1-git\\345\\210\\235\\350\\257\\206.md\" create mode 100644 \"2-git\\345\\237\\272\\347\\241\\200/2-git\\345\\237\\272\\347\\241\\200.md\" latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote (main) $ git push -u origin main Enumerating objects: 5, done. Counting objects: 100% (5/5), done. Delta compression using up to 12 threads Compressing objects: 100% (2/2), done. Writing objects: 100% (5/5), 344 bytes | 344.00 KiB/s, done. Total 5 (delta 0), reused 0 (delta 0), pack-reused 0 To github.com:latteplus/learn-git-note.git * [new branch] main -> main Branch 'main' set up to track remote branch 'main' from 'origin'. 本地目录添加book.json README.md .github/workflows/auto-deploy-site.yml (auto-deploy-site.yml存放在特定的目录结构下，会被github识别，运行其中的actions，其中actions就相当于Jenkins的构建项目指令，可以将推送的书籍源码，构建为gitbook电子书格式，并推送到仓库) （实现机制：运行基本环境容器，并在其中安装nodejs，gitbook等包，在容器中编译为gitbook网页版的格式，然后推送到github，之后容器删除，实现了自动部署gitbook网页） 这几个文件都可以从其他的gitbook目录拷贝，并稍作修改 latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote (main) latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote (main) $ vi book.json # 一般改个title书名就好 auto-deploy-site.yml文件解释 ```yaml latteplus@LAPTOP-00EFC09V MINGW64 /d/myEbook/leanGitNote (main) $ cat .github/workflows/auto-generate-gitbook.yml name: auto-generate-gitbook on: #在main分支上进行push时触发 push: branches: - main 触发条件为，main分支有push时 一系列构建流程 运行ubuntu容器 拉取代码（直接引用了官方定义好的actions 安装nodejs 安装gitbook-cli和gitbook-summary book sm生成SUMMARY.md文件（注意在gitbook build之前，不然会把构建后的node_modules目录也加到该文件中，当然可以通过book.json中的ignore配置忽略该目录，可自行搜索 gitbook install安装book.json中定义的插件 gitbook build构建静态网页文件 拷贝SUMMARY.md文件到_book目录 推送_book目录下所有文件到github中gitbook所在仓库的分支gh-pages（固定名称 jobs: main-to-gh-pages: runs-on: ubuntu-latest steps: - name: checkout main uses: actions/checkout@v2 with: ref: main - name: install nodejs uses: actions/setup-node@v1 - name: configue gitbook run: | npm install -g gitbook-cli npm install -g gitbook-summary book sm gitbook install - name: generate _book folder run: | gitbook build cp SUMMARY.md _book - name: push _book to branch gh-pages env: TOKEN: $ REF: github.com/$ MYEMAIL: boogies@163.com # ！！记得修改为自己邮箱 MYNAME: $ TOKEN为引用的该仓库下的secrets变量，需提前设置 github.repository 和 github.repository_owner 都是内建变量，值为该仓库的名和用户名 run: | cd _book git config --global user.email \"${MYEMAIL}\" git config --global user.name \"${MYNAME}\" git init git remote add origin https://${REF} git add . git commit -m \"Updated By Github Actions With Build $ of $ For Github Pages\" git branch -M main git push --force --quiet \"https://${TOKEN}@${REF}\" main:gh-pages 在action中定义了所有的构建过程，所以本机甚至不需要安装gitbook，在启动的容器中全部完成了。 ``` github上，个人设置中，生成access token setting-》devloper setting-》personal access token-》定义即可，名字自定义，权限范围选择repo即可 并添加到仓库的secrts中，命名为token，auto-deploy-site.yml会用到； 仓库的设置-》secrets-》new repository secrets添加刚刚的token字符串，这里命名为TOKEN actions中也用TOKEN引用 该token给构建网页文件的容器使用，使得其具有权限接入该仓库，并推送构建好的网页文件 1.4. 待解决问题 summary的自动生成，影响井号分隔符使用； 1.5. 多客户协同使用 当有多个电脑时： 新电脑安装git环境 git config 配置个人信息 生成密钥对，并添加到github仓库 拉取gitbook所在仓库，直接编辑md文件即可 编辑后，push到仓库，又会触发actions，进行gitbook网页的构建和部署 实现了：多客户端协同 1.6. 单仓库多分支手动部署 在上面的自动构建示例中，main分支存放gitbook的“源码”，gh-pages分支（固定名称）存放构建后的网页文件， 也可以： 本地搭建gitbook环境 本地写好gitbook源文件 本地gitbook build 然后将生成的_book目录下的网页文件推送到gh-pages分支完成部署 将上述步骤写成脚本，会便捷些 latteplus            updated 2021-02-08 10:21:45 "},"2-hexo搭建笔记/1-hexo本地搭建.html":{"url":"2-hexo搭建笔记/1-hexo本地搭建.html","title":"1-hexo本地搭建","keywords":"","body":" latteplus            updated 2021-02-08 10:21:45 "},"2-hexo搭建笔记/2-hexo远程部署.html":{"url":"2-hexo搭建笔记/2-hexo远程部署.html","title":"2-hexo远程部署","keywords":"","body":" latteplus            updated 2021-02-08 10:21:45 "},"3-ubuntu搭建笔记/1-安装ubuntu和windows双系统.html":{"url":"3-ubuntu搭建笔记/1-安装ubuntu和windows双系统.html","title":"1-安装ubuntu和windows双系统","keywords":"","body":" latteplus            updated 2021-02-08 10:21:45 "},"4-常见工具使用错误/1-常见工具使用错误.html":{"url":"4-常见工具使用错误/1-常见工具使用错误.html","title":"1-常见工具使用错误","keywords":"","body":"1. vmvare workstation错误1.1. 虚拟机ping不通外网 和宿主机1. vmvare workstation错误 1.1. 虚拟机ping不通外网 和宿主机 现象：虚拟机在vmnet8的nat模式下， ping不通宿主机的vmnet8网卡，但宿主机可以ping通虚拟机 解决：windows系统防火墙问题，放行虚拟机的流量即可，（这里简单粗暴，直接关防火墙了） 虚拟机无法访问外网 win + r， 然后输入msconfig，查看vmvare的nat service时没找到， 然后在vmvare的workstatiion中，查看网络编辑器中，vmet8竟然是仅主机模式，和vmnet1一样，（应该是误操作）改为nat模式后，重新应用即可，再查看，此时就能看到nat service了，此时虚拟机可通外网了，可以访问nat模式下的虚拟网关了， latteplus            updated 2021-02-08 10:21:45 "}}